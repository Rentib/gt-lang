-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language gt.

module Parser.Abs where

import Prelude (Char, Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  )
import qualified Data.String

type TranslationUnit = TranslationUnit' BNFC'Position
data TranslationUnit' a = Program a [Decl' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Type = Type' BNFC'Position
data Type' a
    = TInt a
    | TBool a
    | TChar a
    | TVoid a
    | TConst a (Type' a)
    | TFunc a [Type' a] (Type' a)
    | TArray a (Type' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Arg = Arg' BNFC'Position
data Arg' a = PArgVal a Ident (Type' a) | PArgRef a Ident (Type' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Block = Block' BNFC'Position
data Block' a = PBlock a [Decl' a] [Instr' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Decl = Decl' BNFC'Position
data Decl' a
    = DNoInit a Ident (Type' a)
    | DInit a Ident (Expr' a)
    | DConst a Ident (Expr' a)
    | DFunc a Ident [Arg' a] (Type' a) (Block' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Instr = Instr' BNFC'Position
data Instr' a
    = IBlock a (Block' a)
    | IExpr a (Expr' a)
    | IIf a (Expr' a) (Instr' a)
    | IIfElse a (Expr' a) (Instr' a) (Instr' a)
    | IWhile a (Expr' a) (Instr' a)
    | IDo a (Instr' a) (Expr' a)
    | IFor a (Expr' a) (Expr' a) (Expr' a) (Instr' a)
    | IContinue a
    | IBreak a
    | IReturn a (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Expr = Expr' BNFC'Position
data Expr' a
    = ELitInt a Integer
    | ELitChar a Char
    | ELitTrue a
    | ELitFalse a
    | EIdent a Ident
    | EIndex a (Expr' a) (Expr' a)
    | EApply a (Expr' a) [Expr' a]
    | EUOp a (UnaryOp' a) (Expr' a)
    | EMul a (Expr' a) (MulOp' a) (Expr' a)
    | EAdd a (Expr' a) (AddOp' a) (Expr' a)
    | ERel a (Expr' a) (RelOp' a) (Expr' a)
    | EEq a (Expr' a) (EqOp' a) (Expr' a)
    | EAnd a (Expr' a) (Expr' a)
    | EOr a (Expr' a) (Expr' a)
    | EAssign a (Expr' a) (AssignOp' a) (Expr' a)
    | ELambda a [Arg' a] (Type' a) (Block' a)
    | EEmpty a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type UnaryOp = UnaryOp' BNFC'Position
data UnaryOp' a = OpUnaryPlus a | OpUnaryMinus a | OpUnaryBang a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MulOp = MulOp' BNFC'Position
data MulOp' a = OpTimes a | OpDiv a | OpMod a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type AddOp = AddOp' BNFC'Position
data AddOp' a = OpPlus a | OpMinus a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type RelOp = RelOp' BNFC'Position
data RelOp' a = OpLT a | OpLE a | OpGT a | OpGE a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type EqOp = EqOp' BNFC'Position
data EqOp' a = OpEq a | OpNeq a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type AssignOp = AssignOp' BNFC'Position
data AssignOp' a = OpAssign a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition TranslationUnit where
  hasPosition = \case
    Program p _ -> p

instance HasPosition Type where
  hasPosition = \case
    TInt p -> p
    TBool p -> p
    TChar p -> p
    TVoid p -> p
    TConst p _ -> p
    TFunc p _ _ -> p
    TArray p _ -> p

instance HasPosition Arg where
  hasPosition = \case
    PArgVal p _ _ -> p
    PArgRef p _ _ -> p

instance HasPosition Block where
  hasPosition = \case
    PBlock p _ _ -> p

instance HasPosition Decl where
  hasPosition = \case
    DNoInit p _ _ -> p
    DInit p _ _ -> p
    DConst p _ _ -> p
    DFunc p _ _ _ _ -> p

instance HasPosition Instr where
  hasPosition = \case
    IBlock p _ -> p
    IExpr p _ -> p
    IIf p _ _ -> p
    IIfElse p _ _ _ -> p
    IWhile p _ _ -> p
    IDo p _ _ -> p
    IFor p _ _ _ _ -> p
    IContinue p -> p
    IBreak p -> p
    IReturn p _ -> p

instance HasPosition Expr where
  hasPosition = \case
    ELitInt p _ -> p
    ELitChar p _ -> p
    ELitTrue p -> p
    ELitFalse p -> p
    EIdent p _ -> p
    EIndex p _ _ -> p
    EApply p _ _ -> p
    EUOp p _ _ -> p
    EMul p _ _ _ -> p
    EAdd p _ _ _ -> p
    ERel p _ _ _ -> p
    EEq p _ _ _ -> p
    EAnd p _ _ -> p
    EOr p _ _ -> p
    EAssign p _ _ _ -> p
    ELambda p _ _ _ -> p
    EEmpty p -> p

instance HasPosition UnaryOp where
  hasPosition = \case
    OpUnaryPlus p -> p
    OpUnaryMinus p -> p
    OpUnaryBang p -> p

instance HasPosition MulOp where
  hasPosition = \case
    OpTimes p -> p
    OpDiv p -> p
    OpMod p -> p

instance HasPosition AddOp where
  hasPosition = \case
    OpPlus p -> p
    OpMinus p -> p

instance HasPosition RelOp where
  hasPosition = \case
    OpLT p -> p
    OpLE p -> p
    OpGT p -> p
    OpGE p -> p

instance HasPosition EqOp where
  hasPosition = \case
    OpEq p -> p
    OpNeq p -> p

instance HasPosition AssignOp where
  hasPosition = \case
    OpAssign p -> p


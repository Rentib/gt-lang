-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Gt.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Gt.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Gt.Abs.Ident -> Result
transIdent x = case x of
  Gt.Abs.Ident string -> failure x

transTranslationUnit :: Show a => Gt.Abs.TranslationUnit' a -> Result
transTranslationUnit x = case x of
  Gt.Abs.Program _ decls -> failure x

transType :: Show a => Gt.Abs.Type' a -> Result
transType x = case x of
  Gt.Abs.TInt _ -> failure x
  Gt.Abs.TBool _ -> failure x
  Gt.Abs.TChar _ -> failure x
  Gt.Abs.TVoid _ -> failure x
  Gt.Abs.TConst _ type_ -> failure x
  Gt.Abs.TFunc _ types type_ -> failure x
  Gt.Abs.TArray _ type_ -> failure x

transArg :: Show a => Gt.Abs.Arg' a -> Result
transArg x = case x of
  Gt.Abs.PArgVal _ ident type_ -> failure x
  Gt.Abs.PArgRef _ ident type_ -> failure x

transBlock :: Show a => Gt.Abs.Block' a -> Result
transBlock x = case x of
  Gt.Abs.PBlock _ decls instrs -> failure x

transDecl :: Show a => Gt.Abs.Decl' a -> Result
transDecl x = case x of
  Gt.Abs.DNoInit _ ident type_ -> failure x
  Gt.Abs.DInit _ ident expr -> failure x
  Gt.Abs.DConst _ ident expr -> failure x
  Gt.Abs.DFunc _ ident args type_ block -> failure x

transInstr :: Show a => Gt.Abs.Instr' a -> Result
transInstr x = case x of
  Gt.Abs.IBlock _ block -> failure x
  Gt.Abs.IExpr _ expr -> failure x
  Gt.Abs.IIf _ expr instr -> failure x
  Gt.Abs.IIfElse _ expr instr1 instr2 -> failure x
  Gt.Abs.IWhile _ expr instr -> failure x
  Gt.Abs.IDo _ instr expr -> failure x
  Gt.Abs.IFor _ expr1 expr2 expr3 instr -> failure x
  Gt.Abs.IContinue _ -> failure x
  Gt.Abs.IBreak _ -> failure x
  Gt.Abs.IReturn _ expr -> failure x

transExpr :: Show a => Gt.Abs.Expr' a -> Result
transExpr x = case x of
  Gt.Abs.ELitInt _ integer -> failure x
  Gt.Abs.ELitChar _ char -> failure x
  Gt.Abs.ELitTrue _ -> failure x
  Gt.Abs.ELitFalse _ -> failure x
  Gt.Abs.EIdent _ ident -> failure x
  Gt.Abs.EIndex _ expr1 expr2 -> failure x
  Gt.Abs.EApply _ expr exprs -> failure x
  Gt.Abs.EUOp _ unaryop expr -> failure x
  Gt.Abs.EMul _ expr1 mulop expr2 -> failure x
  Gt.Abs.EAdd _ expr1 addop expr2 -> failure x
  Gt.Abs.ERel _ expr1 relop expr2 -> failure x
  Gt.Abs.EEq _ expr1 eqop expr2 -> failure x
  Gt.Abs.EAnd _ expr1 expr2 -> failure x
  Gt.Abs.EOr _ expr1 expr2 -> failure x
  Gt.Abs.EAssign _ expr1 assignop expr2 -> failure x
  Gt.Abs.ELambda _ args type_ block -> failure x
  Gt.Abs.EEmpty _ -> failure x

transUnaryOp :: Show a => Gt.Abs.UnaryOp' a -> Result
transUnaryOp x = case x of
  Gt.Abs.OpUnaryPlus _ -> failure x
  Gt.Abs.OpUnaryMinus _ -> failure x
  Gt.Abs.OpUnaryBang _ -> failure x
  Gt.Abs.OpUnaryTilde _ -> failure x

transMulOp :: Show a => Gt.Abs.MulOp' a -> Result
transMulOp x = case x of
  Gt.Abs.OpTimes _ -> failure x
  Gt.Abs.OpDiv _ -> failure x
  Gt.Abs.OpMod _ -> failure x

transAddOp :: Show a => Gt.Abs.AddOp' a -> Result
transAddOp x = case x of
  Gt.Abs.OpPlus _ -> failure x
  Gt.Abs.OpMinus _ -> failure x

transRelOp :: Show a => Gt.Abs.RelOp' a -> Result
transRelOp x = case x of
  Gt.Abs.OpLT _ -> failure x
  Gt.Abs.OpLE _ -> failure x
  Gt.Abs.OpGT _ -> failure x
  Gt.Abs.OpGE _ -> failure x

transEqOp :: Show a => Gt.Abs.EqOp' a -> Result
transEqOp x = case x of
  Gt.Abs.OpEq _ -> failure x
  Gt.Abs.OpNeq _ -> failure x

transAssignOp :: Show a => Gt.Abs.AssignOp' a -> Result
transAssignOp x = case x of
  Gt.Abs.OpAssign _ -> failure x

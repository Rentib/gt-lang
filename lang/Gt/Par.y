-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Gt.Par
  ( happyError
  , myLexer
  , pTranslationUnit
  ) where

import Prelude

import qualified Gt.Abs
import Gt.Lex

}

%name pTranslationUnit_internal TranslationUnit
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'        { PT _ (TS _ 1)  }
  '!='       { PT _ (TS _ 2)  }
  '%'        { PT _ (TS _ 3)  }
  '&'        { PT _ (TS _ 4)  }
  '&&'       { PT _ (TS _ 5)  }
  '('        { PT _ (TS _ 6)  }
  ')'        { PT _ (TS _ 7)  }
  '*'        { PT _ (TS _ 8)  }
  '+'        { PT _ (TS _ 9)  }
  ','        { PT _ (TS _ 10) }
  '-'        { PT _ (TS _ 11) }
  '->'       { PT _ (TS _ 12) }
  '/'        { PT _ (TS _ 13) }
  ':'        { PT _ (TS _ 14) }
  ';'        { PT _ (TS _ 15) }
  '<'        { PT _ (TS _ 16) }
  '<='       { PT _ (TS _ 17) }
  '='        { PT _ (TS _ 18) }
  '=='       { PT _ (TS _ 19) }
  '=>'       { PT _ (TS _ 20) }
  '>'        { PT _ (TS _ 21) }
  '>='       { PT _ (TS _ 22) }
  '['        { PT _ (TS _ 23) }
  '\\'       { PT _ (TS _ 24) }
  ']'        { PT _ (TS _ 25) }
  'bool'     { PT _ (TS _ 26) }
  'break'    { PT _ (TS _ 27) }
  'char'     { PT _ (TS _ 28) }
  'const'    { PT _ (TS _ 29) }
  'continue' { PT _ (TS _ 30) }
  'do'       { PT _ (TS _ 31) }
  'else'     { PT _ (TS _ 32) }
  'false'    { PT _ (TS _ 33) }
  'fn'       { PT _ (TS _ 34) }
  'for'      { PT _ (TS _ 35) }
  'if'       { PT _ (TS _ 36) }
  'int'      { PT _ (TS _ 37) }
  'return'   { PT _ (TS _ 38) }
  'true'     { PT _ (TS _ 39) }
  'var'      { PT _ (TS _ 40) }
  'void'     { PT _ (TS _ 41) }
  'while'    { PT _ (TS _ 42) }
  '{'        { PT _ (TS _ 43) }
  '||'       { PT _ (TS _ 44) }
  '}'        { PT _ (TS _ 45) }
  '~'        { PT _ (TS _ 46) }
  L_Ident    { PT _ (TV _)    }
  L_charac   { PT _ (TC _)    }
  L_integ    { PT _ (TI _)    }

%%

Ident :: { (Gt.Abs.BNFC'Position, Gt.Abs.Ident) }
Ident  : L_Ident { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.Ident (tokenText $1)) }

Char    :: { (Gt.Abs.BNFC'Position, Char) }
Char     : L_charac { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Char) }

Integer :: { (Gt.Abs.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Integer) }

TranslationUnit :: { (Gt.Abs.BNFC'Position, Gt.Abs.TranslationUnit) }
TranslationUnit
  : ListDecl { (fst $1, Gt.Abs.Program (fst $1) (snd $1)) }

Type :: { (Gt.Abs.BNFC'Position, Gt.Abs.Type) }
Type
  : Type1 { (fst $1, (snd $1)) }
  | Type1 '[' ']' { (fst $1, Gt.Abs.TArray (fst $1) (snd $1)) }

Type1 :: { (Gt.Abs.BNFC'Position, Gt.Abs.Type) }
Type1
  : '(' Type ')' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), (snd $2)) }
  | 'int' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.TInt (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'bool' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.TBool (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'char' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.TChar (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'void' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.TVoid (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'const' Type { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.TConst (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '(' ListType ')' '->' Type { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.TFunc (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $5)) }

ListType :: { (Gt.Abs.BNFC'Position, [Gt.Abs.Type]) }
ListType
  : {- empty -} { (Gt.Abs.BNFC'NoPosition, []) }
  | Type { (fst $1, (:[]) (snd $1)) }
  | Type ',' ListType { (fst $1, (:) (snd $1) (snd $3)) }

Arg :: { (Gt.Abs.BNFC'Position, Gt.Abs.Arg) }
Arg
  : Ident ':' Type { (fst $1, Gt.Abs.PArgVal (fst $1) (snd $1) (snd $3)) }
  | '&' Ident ':' Type { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.PArgRef (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }

ListArg :: { (Gt.Abs.BNFC'Position, [Gt.Abs.Arg]) }
ListArg
  : {- empty -} { (Gt.Abs.BNFC'NoPosition, []) }
  | Arg { (fst $1, (:[]) (snd $1)) }
  | Arg ',' ListArg { (fst $1, (:) (snd $1) (snd $3)) }

Block :: { (Gt.Abs.BNFC'Position, Gt.Abs.Block) }
Block
  : '{' ListDecl ListInstr '}' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.PBlock (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }

Decl :: { (Gt.Abs.BNFC'Position, Gt.Abs.Decl) }
Decl
  : 'var' Ident ':' Type ';' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.DNoInit (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'var' Ident '=' Expr ';' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.DInit (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'const' Ident '=' Expr ';' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.DConst (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'fn' Ident '(' ListArg ')' '->' Type Block { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.DFunc (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $7) (snd $8)) }

ListDecl :: { (Gt.Abs.BNFC'Position, [Gt.Abs.Decl]) }
ListDecl
  : {- empty -} { (Gt.Abs.BNFC'NoPosition, []) }
  | Decl ListDecl { (fst $1, (:) (snd $1) (snd $2)) }

Instr :: { (Gt.Abs.BNFC'Position, Gt.Abs.Instr) }
Instr
  : Block { (fst $1, Gt.Abs.IBlock (fst $1) (snd $1)) }
  | Expr ';' { (fst $1, Gt.Abs.IExpr (fst $1) (snd $1)) }
  | 'if' '(' Expr ')' Instr { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.IIf (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
  | 'if' '(' Expr ')' Instr 'else' Instr { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.IIfElse (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5) (snd $7)) }
  | 'while' '(' Expr ')' Instr { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.IWhile (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
  | 'do' Instr 'while' '(' Expr ')' ';' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.IDo (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $5)) }
  | 'for' '(' Expr ';' Expr ';' Expr ')' Instr { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.IFor (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5) (snd $7) (snd $9)) }
  | 'continue' ';' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.IContinue (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'break' ';' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.IBreak (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'return' Expr ';' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.IReturn (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }

ListInstr :: { (Gt.Abs.BNFC'Position, [Gt.Abs.Instr]) }
ListInstr
  : {- empty -} { (Gt.Abs.BNFC'NoPosition, []) }
  | Instr ListInstr { (fst $1, (:) (snd $1) (snd $2)) }

Expr :: { (Gt.Abs.BNFC'Position, Gt.Abs.Expr) }
Expr
  : Expr1 { (fst $1, (snd $1)) }
  | '\\' '(' ListArg ')' '->' Type '=>' Block { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.ELambda (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $6) (snd $8)) }
  | {- empty -} { (Gt.Abs.BNFC'NoPosition, Gt.Abs.EEmpty Gt.Abs.BNFC'NoPosition) }

Expr1 :: { (Gt.Abs.BNFC'Position, Gt.Abs.Expr) }
Expr1
  : Expr2 { (fst $1, (snd $1)) }
  | Expr9 AssignOp Expr2 { (fst $1, Gt.Abs.EAssign (fst $1) (snd $1) (snd $2) (snd $3)) }

Expr2 :: { (Gt.Abs.BNFC'Position, Gt.Abs.Expr) }
Expr2
  : Expr3 { (fst $1, (snd $1)) }
  | '(' Expr2 '||' Expr3 ')' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.EOr (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }

Expr3 :: { (Gt.Abs.BNFC'Position, Gt.Abs.Expr) }
Expr3
  : Expr4 { (fst $1, (snd $1)) }
  | '(' Expr3 '&&' Expr4 ')' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.EAnd (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }

Expr4 :: { (Gt.Abs.BNFC'Position, Gt.Abs.Expr) }
Expr4
  : Expr5 { (fst $1, (snd $1)) }
  | Expr4 EqOp Expr5 { (fst $1, Gt.Abs.EEq (fst $1) (snd $1) (snd $2) (snd $3)) }

Expr5 :: { (Gt.Abs.BNFC'Position, Gt.Abs.Expr) }
Expr5
  : Expr6 { (fst $1, (snd $1)) }
  | Expr5 RelOp Expr6 { (fst $1, Gt.Abs.ERel (fst $1) (snd $1) (snd $2) (snd $3)) }

Expr6 :: { (Gt.Abs.BNFC'Position, Gt.Abs.Expr) }
Expr6
  : Expr7 { (fst $1, (snd $1)) }
  | Expr6 AddOp Expr7 { (fst $1, Gt.Abs.EAdd (fst $1) (snd $1) (snd $2) (snd $3)) }

Expr7 :: { (Gt.Abs.BNFC'Position, Gt.Abs.Expr) }
Expr7
  : Expr8 { (fst $1, (snd $1)) }
  | Expr7 MulOp Expr8 { (fst $1, Gt.Abs.EMul (fst $1) (snd $1) (snd $2) (snd $3)) }

Expr8 :: { (Gt.Abs.BNFC'Position, Gt.Abs.Expr) }
Expr8
  : Expr9 { (fst $1, (snd $1)) }
  | UnaryOp Expr9 { (fst $1, Gt.Abs.EUOp (fst $1) (snd $1) (snd $2)) }

Expr9 :: { (Gt.Abs.BNFC'Position, Gt.Abs.Expr) }
Expr9
  : '(' Expr ')' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), (snd $2)) }
  | Integer { (fst $1, Gt.Abs.ELitInt (fst $1) (snd $1)) }
  | Char { (fst $1, Gt.Abs.ELitChar (fst $1) (snd $1)) }
  | 'true' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.ELitTrue (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'false' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.ELitFalse (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }
  | Ident { (fst $1, Gt.Abs.EIdent (fst $1) (snd $1)) }
  | Expr9 '[' Expr ']' { (fst $1, Gt.Abs.EIndex (fst $1) (snd $1) (snd $3)) }
  | Expr9 '(' ListExpr ')' { (fst $1, Gt.Abs.EApply (fst $1) (snd $1) (snd $3)) }

ListExpr :: { (Gt.Abs.BNFC'Position, [Gt.Abs.Expr]) }
ListExpr
  : {- empty -} { (Gt.Abs.BNFC'NoPosition, []) }
  | Expr { (fst $1, (:[]) (snd $1)) }
  | Expr ',' ListExpr { (fst $1, (:) (snd $1) (snd $3)) }

UnaryOp :: { (Gt.Abs.BNFC'Position, Gt.Abs.UnaryOp) }
UnaryOp
  : '+' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.OpUnaryPlus (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }
  | '-' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.OpUnaryMinus (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }
  | '!' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.OpUnaryBang (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }
  | '~' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.OpUnaryTilde (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }

MulOp :: { (Gt.Abs.BNFC'Position, Gt.Abs.MulOp) }
MulOp
  : '*' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.OpTimes (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }
  | '/' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.OpDiv (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }
  | '%' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.OpMod (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }

AddOp :: { (Gt.Abs.BNFC'Position, Gt.Abs.AddOp) }
AddOp
  : '+' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.OpPlus (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }
  | '-' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.OpMinus (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }

RelOp :: { (Gt.Abs.BNFC'Position, Gt.Abs.RelOp) }
RelOp
  : '<' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.OpLT (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }
  | '<=' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.OpLE (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }
  | '>' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.OpGT (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }
  | '>=' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.OpGE (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }

EqOp :: { (Gt.Abs.BNFC'Position, Gt.Abs.EqOp) }
EqOp
  : '==' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.OpEq (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }
  | '!=' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.OpNeq (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }

AssignOp :: { (Gt.Abs.BNFC'Position, Gt.Abs.AssignOp) }
AssignOp
  : '=' { (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1), Gt.Abs.OpAssign (uncurry Gt.Abs.BNFC'Position (tokenLineCol $1))) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pTranslationUnit :: [Token] -> Err Gt.Abs.TranslationUnit
pTranslationUnit = fmap snd . pTranslationUnit_internal
}


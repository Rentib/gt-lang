entrypoints     TranslationUnit ;

Program.        TranslationUnit ::= [Decl] ;

TInt.           Type ::= "int" ;
TBool.          Type ::= "bool" ;
TChar.          Type ::= "char" ;
TVoid.          Type ::= "void" ;
TConst.         Type ::= "const" Type ;
TFunc.          Type ::= "(" [Type] ")" "->" Type ;
TArray.         Type ::= "[" Type "]" ;
separator       Type  "," ;

PArgVal.        Arg ::= Ident ":" Type ;
PArgRef.        Arg ::= "&" Ident ":" Type ;
separator       Arg "," ;

PBlock.         Block ::= "{" [Decl] [Instr] "}" ;

DNoInit.        Decl ::= "var" Ident ":" Type ";" ;
DInit.          Decl ::= "var" Ident "=" Expr ";" ;
DConst.         Decl ::= "const" Ident "=" Expr ";" ;
DFunc.          Decl ::= "fn" Ident "(" [Arg] ")" "->" Type Block ;
separator       Decl "" ;

IBlock.         Instr ::= Block ;
IExpr.          Instr ::= Expr ";" ;
IIf.            Instr ::= "if" "(" Expr ")" Instr ;
IIfElse.        Instr ::= "if" "(" Expr ")" Instr "else" Instr ;
IWhile.         Instr ::= "while" "(" Expr ")" Instr ;
IContinue.      Instr ::= "continue" ";" ;
IBreak.         Instr ::= "break" ";" ;
IReturn.        Instr ::= "return" Expr ";" ;
separator       Instr "" ;

coercions       Expr 9 ;
ELitInt.        Expr9 ::= Integer ;
ELitChar.       Expr9 ::= Char ;
ELitString.     Expr9 ::= String ;
ELitTrue.       Expr9 ::= "true" ;
ELitFalse.      Expr9 ::= "false" ;
EIdent.         Expr9 ::= Ident ;
EIndex.         Expr9 ::= Expr9 "[" Expr "]" ;
EApply.         Expr9 ::= Expr9 "(" [Expr] ")" ;
EUOp.           Expr8 ::= UnaryOp Expr9 ;
EMul.           Expr7 ::= Expr7 MulOp Expr8 ;
EAdd.           Expr6 ::= Expr6 AddOp Expr7 ;
ERel.           Expr5 ::= Expr5 RelOp Expr6 ;
EEq.            Expr4 ::= Expr4 EqOp Expr5 ;
EAnd.           Expr3 ::= Expr3 "&&" Expr4 ;
EOr.            Expr2 ::= Expr2 "||" Expr3 ;
EAssign.        Expr1 ::= Expr9 AssignOp Expr2 ;
ELambda.        Expr  ::= "\\" "(" [Arg] ")" "->" Type "=>" Block ;
EEmpty.         Expr  ::= ;
separator       Expr "," ;

OpUnaryPlus.    UnaryOp ::= "+" ;
OpUnaryMinus.   UnaryOp ::= "-" ;
OpUnaryBang.    UnaryOp ::= "!" ;

OpTimes.        MulOp ::= "*" ;
OpDiv.          MulOp ::= "/" ;
OpMod.          MulOp ::= "%" ;

OpPlus.         AddOp ::= "+" ;
OpMinus.        AddOp ::= "-" ;

OpLT.           RelOp ::= "<" ;
OpLE.           RelOp ::= "<=" ;
OpGT.           RelOp ::= ">" ;
OpGE.           RelOp ::= ">=" ;

OpEq.           EqOp ::= "==" ;
OpNeq.          EqOp ::= "!=" ;

OpAssign.       AssignOp ::=  "=" ;
-- TODO: add more assign operators

comment         "//" ;
comment         "/*" "*/" ;
